version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: property-mapping-backend
    container_name: property-mapping-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/property_mapping
      - JWT_SECRET=dev_jwt_secret
      - JWT_EXPIRE=30d
      - JWT_COOKIE_EXPIRE=30
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres
    networks:
      - app-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: property-mapping-frontend
    container_name: property-mapping-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_LOCATIONIQ_API_KEY=${LOCATIONIQ_API_KEY}
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - backend
    networks:
      - app-network

  # PostgreSQL service
  postgres:
    image: postgres:14-alpine
    container_name: property-mapping-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=property_mapping
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Initialize database with schema
      - ./backend/db/migrations:/docker-entrypoint-initdb.d
    networks:
      - app-network

  # pgAdmin - PostgreSQL Admin Interface
  pgadmin:
    image: dpage/pgadmin4
    container_name: property-mapping-pgadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - app-network

  # Redis for caching
  redis:
    image: redis:alpine
    container_name: property-mapping-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

volumes:
  postgres-data:
  pgadmin-data:
  redis-data:

networks:
  app-network:
    driver: bridge